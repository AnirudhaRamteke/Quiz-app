{"version":3,"sources":["components/QuestionBox.js","components/Result.js","index.js"],"names":["QuestionBox","question","options","correct","selected","splice","Math","floor","random","newArray","filter","item","pos","self","indexOf","map","he","decode","console","log","useState","answer","setAnswer","className","text","index","onClick","Result","score","playAgain","Quiz","state","questionBank","responses","getQuestions","fetch","then","res","json","result","results","setState","computeAnswer","combine","arr","ele","this","length","category","correct_answer","incorrect_answers","Component","ReactDOM","render","document","getElementById"],"mappings":"oOA8BeA,EA3BK,SAAC,GAA4C,IAA3CC,EAA0C,EAA1CA,SAAUC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,SAChDF,EAAQG,OAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAc,EAAGL,GAChD,IAAIM,EAAWP,EAAQQ,QAAO,SAASC,EAAMC,EAAKC,GAChD,OAAOA,EAAKC,QAAQH,KAAUC,KAEhCH,EAASM,KAAI,SAAAJ,GAAI,OAAIK,IAAGC,OAAON,MAC/BO,QAAQC,IAAIV,GANkD,MAOlCW,mBAASX,GAPyB,mBAOvDY,EAPuD,KAO/CC,EAP+C,KAQ9D,OACE,sBAAKC,UAAU,cAAf,UACE,qBAAKA,UAAU,WAAf,SAA2BtB,IAC1BoB,EAAON,KAAI,SAACS,EAAMC,GAAP,OACV,wBAEEF,UAAU,YACVG,QAAS,WACPJ,EAAU,CAACE,IACXpB,EAASoB,IALb,SAQGA,GAPIC,UCLAE,EATA,SAAC,GAAD,IAAEC,EAAF,EAAEA,MAAOC,EAAT,EAASA,UAAT,OACb,sBAAKN,UAAU,cAAf,UACE,sBAAKA,UAAU,QAAf,wBAAmCK,EAAnC,4BACA,wBAAQL,UAAU,UAAUG,QAASG,EAArC,6BCKEC,E,4MACJC,MAAQ,CACNC,aAAc,GACdJ,MAAO,EACPK,UAAW,G,EAGbC,aAAe,WAObC,MAAM,qDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJrB,QAAQC,IAAIoB,EAAOC,SACnB,EAAKC,SAAS,CACZT,aAAcO,EAAOC,c,EAO3BE,cAAgB,SAACrB,EAAQlB,GACpBkB,IAAWlB,GACZ,EAAKsC,SAAS,CACZb,MAAO,EAAKG,MAAMH,MAAQ,IAI9B,EAAKa,SAAS,CACZR,UAAW,EAAKF,MAAME,UAAY,GAAK,EAAKF,MAAME,UAAY,EAAI,M,EAGxEJ,UAAY,WACV,EAAKK,eACL,EAAKO,SAAS,CACZb,MAAO,EACPK,UAAW,K,EAIfU,QAAU,SAACC,EAAKC,GAEd,OAAQD,EAAIvC,OAAOC,KAAKC,MAAsB,EAAhBD,KAAKE,UAAe,EAAGqC,I,kEAKnDC,KAAKZ,iB,+BAuBA,IAAD,OACN,OACE,sBAAKX,UAAU,YAAf,UACA,qBAAKA,UAAU,QAAf,kBACCuB,KAAKf,MAAMC,aAAae,OAAS,GAChCD,KAAKf,MAAME,UAAY,IACvBa,KAAKf,MAAMC,aAAajB,KAAI,WAAuDU,GAAvD,EAAEuB,SAAF,IAAW/C,EAAX,EAAWA,SAASgD,EAApB,EAAoBA,eAAeC,EAAnC,EAAmCA,kBAAnC,OAE1B,cAAC,EAAD,CACMjD,SAAYe,IAAGC,OAAOhB,GACtBC,QAAUgD,EACV/C,QAAW8C,EAEX7C,SAAY,SAAAiB,GAAM,OAAI,EAAKqB,cAAcrB,EAAO4B,KAD3CxB,MASW,KAAzBqB,KAAKf,MAAME,UAAoB,cAAC,EAAD,CAAQL,MAAOkB,KAAKf,MAAMH,MAAOC,UAAWiB,KAAKjB,YAAe,Y,GAhGjFsB,aAsGnBC,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.e4668ca5.chunk.js","sourcesContent":["import React, {useState} from \"react\";\nimport he from 'he';\n\nconst QuestionBox = ({question, options, correct, selected}) => {\n  options.splice(Math.floor(Math.random() * 4),0, correct)\n  let newArray = options.filter(function(item, pos, self) {\n    return self.indexOf(item) === pos;\n})\n  newArray.map(item => he.decode(item) )\n  console.log(newArray)\n  const [answer, setAnswer] = useState(newArray);\n  return (\n    <div className=\"questionBox\">\n      <div className=\"question\">{question}</div>\n      {answer.map((text, index) => (\n        <button\n          key={index}\n          className=\"answerBtn\"\n          onClick={() => {\n            setAnswer([text])\n            selected(text)\n          }}\n        >\n          {text}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default QuestionBox;\n","import React from \"react\";\n\nconst Result = ({score, playAgain}) => (\n  <div className=\"score-board\">\n    <div className=\"score\">You scored {score} / 10 correct answers!</div>\n    <button className=\"playBtn\" onClick={playAgain}>\n      Play again!\n    </button>\n  </div>\n);\n\nexport default Result;\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/style.css';\nimport he from 'he';\nimport QuestionBox from './components/QuestionBox';\nimport Result from './components/Result';\n// import quizService from './quizService';\n\n\n\nclass Quiz extends Component {\n  state = {\n    questionBank: [],\n    score: 0,\n    responses: 0\n  };\n  \n  getQuestions = () => {\n    // quizService().then(question => {\n    //   this.setState({\n    //     questionBank: question\n    //   });\n    // })\n\n    fetch('https://opentdb.com/api.php?amount=10&category=19')\n    .then(res => res.json())\n    .then(result => {\n      console.log(result.results)\n      this.setState({\n        questionBank: result.results\n      });\n\n    })\n\n  };\n\n  computeAnswer = (answer, correct) => {\n    if(answer === correct){\n      this.setState({\n        score: this.state.score + 1\n      })\n\n    }\n    this.setState({\n      responses: this.state.responses < 10 ? this.state.responses + 1 : 10\n    })\n  }\nplayAgain = () => {\n  this.getQuestions();\n  this.setState({\n    score: 0,\n    responses: 0\n  })\n}\n\ncombine = (arr, ele) => {\n\n  return  arr.splice(Math.floor(Math.random() * 4), 0, ele);\n\n}\n\n  componentDidMount(){\n    this.getQuestions();\n  }\n//   render(){\n//     return(\n//       <div className=\"container\">\n//       <div className=\"title\">Quiz</div>\n//       {this.state.questionBank.length > 0 &&\n//         this.state.responses < 5 &&\n//          this.state.questionBank.map(({question, answers, correct, questionId}) => (\n//           <QuestionBox\n//                 question = {question}\n//                 options= {answers}\n//                 key = {questionId}\n//                 selected= {answer => this.computeAnswer(answer, correct)}\n//           />   )  \n//       )}\n\n//       {this.state.responses === 5 ? (<Result score={this.state.score} playAgain={this.playAgain}/>): null }\n//       </div>\n//     );\n//   }\n// }\n\nrender(){\n  return(\n    <div className=\"container\">\n    <div className=\"title\">Quiz</div>\n    {this.state.questionBank.length > 0 &&\n      this.state.responses < 10 &&\n      this.state.questionBank.map(({category,question,correct_answer,incorrect_answers}, index) => (\n        \n        <QuestionBox \n              question = {he.decode(question)}\n              options= {incorrect_answers}\n              correct = {correct_answer}\n              key={index} \n              selected = {answer => this.computeAnswer(answer,correct_answer)}\n              />\n\n\n      )\n      \n      \n    )}\n    {this.state.responses === 10 ? (<Result score={this.state.score} playAgain={this.playAgain}/>): null }\n    </div>\n  );\n}\n}\n\nReactDOM.render(<Quiz />, document.getElementById('root'));"],"sourceRoot":""}